<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="()KxdK]~7{ukr}WiYb^w">roll</variable></variables><block type="pxt-on-start" id="xRRgvHNlG#rZ^u`HECiY" x="0" y="0"><statement name="HANDLER"><block type="device_print_message" id="zv)VW3-g7h#b|-6nPG3M"><value name="text"><shadow type="text" id="V.!mJJvC[70;+UhuSUPB"><field name="TEXT">Shake to roll</field></shadow></value></block></statement></block><block type="device_gesture_event" id="G%$ZJP[64AO/e9}0qH@`" x="404" y="0"><field name="NAME">Gesture.Shake</field><comment pinned="true" h="80" w="160">Great job. You moved the commands inside of the onShake event trigger. This way, the code will get executed when the micro:bit is shaken.&#10;here is a comment.</comment><statement name="HANDLER"><block type="variables_set" id="gUIaY^W)J9gbL#Zf]z:t"><field name="VAR" id="()KxdK]~7{ukr}WiYb^w">roll</field><comment pinned="false" h="80" w="160">A variable is a place where your program can store a value. We need a place to store the result of the roll, so I created a variable called roll.&#10;I have the program generate a random number between 1 and 6, and I assign that value to the roll variable</comment><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="device_random" id="RIh~=0*t.!MEaz*VaYOb"><value name="min"><shadow type="math_number" id="!OvdM3F:f;wB;`58]Qs@"><field name="NUM">1</field></shadow></value><value name="limit"><shadow type="math_number" id=".=[pM@4ZmNr7r/N^_#|E"><field name="NUM">6</field></shadow></value></block></value><next><block type="controls_if" id="ep-3MU94ls[pfLY_FQM0"><mutation elseif="4" else="1"/><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="IA:j7iP/oePFHpg4XD%9"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="ZKeX]|D}ko-Y@Q{P0Cva"><field name="VAR" id="()KxdK]~7{ukr}WiYb^w">roll</field></block></value><value name="B"><shadow type="math_number" id="5|yK4RdXt`w,n-f*:()b"><field name="NUM">1</field></shadow></value></block></value><statement name="DO0"><block type="device_show_leds" id="|pU4qtrN]E2){iUHL]v7"><field name="LEDS">`&#10;        . . . . . &#10;        . . . . . &#10;        . . . . . &#10;        . . . . . &#10;        . . . . .&#10;        `</field></block></statement><value name="IF1"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="%%`pg)+Yy)s+M^/x:%8q"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="n5^_?(3sl2GXj_`.lBKU"><field name="VAR" id="()KxdK]~7{ukr}WiYb^w">roll</field></block></value><value name="B"><shadow type="math_number" id="}S/!|@XtF*h6YazSRwXB"><field name="NUM">2</field></shadow></value></block></value><statement name="DO1"><block type="device_show_leds" id=",:Fdnb$MyYx_?^GBy,`)"><field name="LEDS">`&#10;        . . . . . &#10;        . . . . . &#10;        . # . # . &#10;        . . . . . &#10;        . . . . .&#10;        `</field></block></statement><value name="IF2"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="Dp(PB+Pq7w`SSS.fV-*^"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="9l,40fd-O@No^uP{3g9L"><field name="VAR" id="()KxdK]~7{ukr}WiYb^w">roll</field></block></value><value name="B"><shadow type="math_number" id="m+3n1Ap%xbw3m~Vmpd[q"><field name="NUM">3</field></shadow></value></block></value><statement name="DO2"><block type="device_show_leds" id="cC7fXo@H`#H~{9KEcgG8"><field name="LEDS">`&#10;        . . # . . &#10;        . . . . . &#10;        . . # . . &#10;        . . . . . &#10;        . . # . .&#10;        `</field></block></statement><value name="IF3"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="]dsmmA2zErNdoc4Rel_E"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="%M(70K=.wEFGdq14~~DW"><field name="VAR" id="()KxdK]~7{ukr}WiYb^w">roll</field></block></value><value name="B"><shadow type="math_number" id="Jgvf#u8IK+fc6{qKq%[g"><field name="NUM">4</field></shadow></value></block></value><statement name="DO3"><block type="device_show_leds" id="+]uFus@Wb:y9l@CczRW:"><field name="LEDS">`&#10;        # . . . # &#10;        . . . . . &#10;        . . . . . &#10;        . . . . . &#10;        # . . . #&#10;        `</field></block></statement><value name="IF4"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id=":lrun7e5AagoV!PVK9TU"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="Rj*Kt#$@`I2Zq2NSGBRi"><field name="VAR" id="()KxdK]~7{ukr}WiYb^w">roll</field></block></value><value name="B"><shadow type="math_number" id="l}z~(5j3Ds2qot+gY)]$"><field name="NUM">5</field></shadow></value></block></value><statement name="DO4"><block type="device_show_leds" id="yyz6NN)@r!=v1oGt4`qK"><field name="LEDS">`&#10;        # . . . # &#10;        . . . . . &#10;        . . # . . &#10;        . . . . . &#10;        # . . . #&#10;        `</field></block></statement><statement name="ELSE"><block type="device_show_leds" id="yMYM`7^Lzx,X-)kDvbO!"><field name="LEDS">`&#10;        # . . . # &#10;        . . . . . &#10;        # . . . # &#10;        . . . . . &#10;        # . . . #&#10;        `</field></block></statement></block></next></block></statement></block></xml>